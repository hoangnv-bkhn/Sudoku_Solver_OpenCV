# -*- coding: utf-8 -*-
"""Sudoku_Solver

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qe0Oi_5SQQGuDP2DXtN7HAthAXa4u2Br
"""

from utlis import *
from google.colab.patches import cv2_imshow
import sudukoSolver

#B1: Tiền xử lý ảnh
print('Welcome to Sudoku Solver')
print('Pleases enter Sudoku image name!')
imagename = input()
pathImage = "Resources/"+imagename
heightImg = 450
widthImg = 450
img = cv2.imread(pathImage)
img = cv2.resize(img, (widthImg, heightImg))

cv2_imshow(img);

#B2: Vẽ đường viền (Contour)
imgBlank = np.zeros((heightImg,widthImg, 3), np.uint8)
imgThreshold = preProcess(img)
imgContours = img.copy()
imgBigContours = img.copy()
contours, hierarchy = cv2.findContours(imgThreshold,cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
cv2.drawContours(imgContours, contours, -1, (0,55,100), 3)

cv2_imshow(imgContours);

#B3: Xác định đường viền lớn nhất-> Bảng Sudoku
biggest, maxArea = biggestContour(contours)
print(biggest)
if biggest.size != 0:
  biggest = reorder(biggest)
  print(biggest)
  cv2.drawContours(imgBigContours, biggest, -1, (0, 0,255), 25)
  pts1 = np.float32(biggest)
  pts2 = np.float32([[0, 0], [widthImg, 0], [0,heightImg], [widthImg, heightImg]])
  matrix = cv2.getPerspectiveTransform(pts1, pts2)
  imgWarpColored = cv2.warpPerspective(img, matrix, (widthImg, heightImg))
  imgDetectedDigits = imgBlank.copy()
  imgWarpColored = cv2.cvtColor(imgWarpColored, cv2.COLOR_BGR2GRAY)

imageArray = ([imgBigContours,imgWarpColored])
stackedImage = stackImages(imageArray, 1)

cv2_imshow(stackedImage)
# cv2_imshow(imgBigContours);
# cv2_imshow(imgWarpColored);

#B4: Dùng CNN nhận diện số từ img
  imgSolvedDigits = imgBlank.copy()
  boxes = splitBoxes(imgWarpColored)
  print(len(boxes))
  #cv2_imshow(boxes[33])
  model = intializePredectionModel()
  numbers = getPredection(boxes, model)
  print(numbers)
  imgDetectedDigits = displayNumbers(imgDetectedDigits, numbers, color=(255, 255 , 255))
  numbers = np.asarray(numbers)
  posArray = np.where(numbers > 0, 0, 1)
  print(posArray)
  imgDetectedDigits = drawGrid(imgDetectedDigits)
  cv2_imshow(imgDetectedDigits);

# B5: Giải Sudoku
  board = np.array_split(numbers, 9)
  print(board)
  try:
    sudukoSolver.solve(board)
  except:
    pass

  print(board)

  flatList = []
  for sublist in board:
    for item in sublist:
      flatList.append(item)
  solvedNumbers = flatList*posArray
  imgSolvedDigits = displayNumbers(imgSolvedDigits, solvedNumbers)
  imgtemp = imgSolvedDigits.copy()
  imgtemp = drawGrid(imgtemp)
  cv2_imshow(imgtemp)

#B6: Hiển thị kết quả lên ảnh gốc
  pts2 = np.float32(biggest)
  pts1 = np.float32([[0, 0], [widthImg, 0], [0,heightImg], [widthImg, heightImg]])
  matrix = cv2.getPerspectiveTransform(pts1, pts2)
  imgInvWarpColored = img.copy()
  imgInvWarpColored = cv2.warpPerspective(imgSolvedDigits, matrix, (widthImg, heightImg))
  inv_perspective = cv2.addWeighted(imgInvWarpColored, 1, img, 0.5, 1)

  imageArray = ([img,imgInvWarpColored])
  stackedImage = stackImages(imageArray, 1)

  cv2_imshow(stackedImage)
  # cv2_imshow(imgInvWarpColored)
  cv2_imshow(inv_perspective);